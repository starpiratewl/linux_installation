##############################################################################################################################
## where the page files in the linux system
cd /var/www/html
ls /var/www/html
##info.php  today.php

##############################################################################################################################
## write a simple page named "today.php", call the built-in function date() to see what the page exhibites
## This practice tell us two things:
## 1. php in html codes are tagged with <?php   ?>
## 2. built-in function in PHP can be called directly with (), in the () we can set some parameters about this function
vi today.php
##<!DOCTYPE html>
##<html lang="en">
##        <head>
##                <meta charset="utf-8">
##                <title>Today&rsquo;s Date</title>
##        </head>
##        <body>
##                <p>Today&rsquo;s date (according to this web server) is
##                        <?php
##                        echo date('l, F jS Y.');
##                        ?>
##                </p>
##        </body>
##</html>


##############################################################################################################################
## write a simple page to skip from one page to another page can pass value via the url
## This practice tell us following points:
##  1. in html use <a> </a> to skip from one page to another
##  2. in <a> </a> we use page name to direct to the target page "welcome1.php"
##  3. in <a> </a> we use "?name=<b>WangLiang_Starpirate</b>" to pass the value
##  4. in PHP we use "$name = $_GET['name']" to receive the value passed from the url
##  5. but use the value passed from the url lurking a big hole here, malicious code can be passed with the value. So we use htmlspecialchars($name, ENT_QUOTES, 'UTF-8') function to avoid this pitfall
##  6. in PHP, we use "."  to join the characters


vi name.html
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv = "content-type" content = "text/html; charset = utf-8"/>
##        </head>
##        <body>
##                <p><a href="welcome1.php?name=<b>WangLiang_Starpirate</b>">Hi, I&rsquo;m Kevin!</a></p>
##        </body>
##</html>

vi welcome1.php
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang="en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv="content-type" content="text/html; charset=utf-8">
##        </head>
##        <body>
##                <p>
##                        <?php
##                        $name = $_GET['name'];
##                        echo 'Welcome to our web site, ' . htmlspecialchars($name, ENT_QUOTES, 'UTF-8') . '!';
##                        ?>
##                </p>
##        </body>
##</html>


##############################################################################################################################
## we try to pass multiple values via url
## This practice tell us the following points:
## 1. we can pass multiple values via url, and each value should be seperated use the character "&amp;"
## 2. we should use $_GET() function several times in PHP to receive the values
## 3. When received the values, don't forget the htmlspecialchars() function


vi name.html
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv = "content-type" content = "text/html; charset = utf-8"/>
##        </head>
##        <body>
##                <p><a href="name.php?firstname=WangLiang&amp;lastname=Starpirate">Hi, I&rsquo;m Kevin!</a></p>
##        </body>
##</html>

vi name.php
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv="content-type" content="text/html; charset="utf-8"">
##        </head>
##        <body>
##                <p>
##                        <?php
##                        $firstName = $_GET['firstname'];
##                        $lastName = $_GET['lastname'];
##                        echo 'Welcome to our web site, ' .
##                        htmlspecialchars($firstName, ENT_QUOTES, 'UTF-8') . ' ' .
##                        htmlspecialchars($lastName, ENT_QUOTES, 'UTF-8') . '!';
##                        ?>
##                </p>
##        </body>
##</html>



##############################################################################################################################
## passing variables in Forms, means we don't want to incorporate the variable in our code, but invite the user to submit by themself
## This practice tell us the following points:
## 1. we use form and div in html to provide the input interface
## 2. the label for in <label> and id in <input> are not important , the important part is the name in <input>, which is the variable name which will pass via the url
## 3. we use the <input type = "submit"> to submit the value we input
## 4. in the php code , pay attention to the "$firstName = $_GET['firstnamE']", here what variable name we use should be the same as the name in the <input name>


vi form_name.html
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv = "content-type" content = "text/html; charset = utf-8"/>
##        </head>
##        <body>
##                <form action="name.php" method="get">
##                        <div><label for = "firstName">First name:
##                                <input type = "text" name = "firstnamE" id = "firstnaMe"></label>
##                        </div>
##                        <div><label for = "lastName">Last name:
##                                <input type = "text" name = "lastnamE" id = "lastnaMe"></label>
##                        </div>
##                        <div><input type="submit" value = "GO"></div>
##                </form>
##        </body>
##</html>


vi name.php
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv="content-type" content="text/html; charset="utf-8"">
##        </head>
##        <body>
##                <p>
##                        <?php
##                        $firstName = $_GET['firstnamE'];
##                        $lastName = $_GET['lastnamE'];
##                        echo 'Welcome to our web site, ' .
##                        htmlspecialchars($firstName, ENT_QUOTES, 'UTF-8') . ' ' .
##                        htmlspecialchars($lastName, ENT_QUOTES, 'UTF-8') . '!';
##                        ?>
##                </p>
##        </body>
##</html>


##############################################################################################################################
## passing values via url is has other limitation, what should we do if the user input a very long string? because the url has an length limitation,so we want to pass the variables invisiblly.
## when we do this, it also means that if the user bookmark the page , this bookmark will be useless, because it lacks the submitted values here.
## so the search engine tend to use the get value, because it let the user to save the page with the submitted values.
## This practice tell us the following points:
## 1. we use "post" method in html
## 2. we use "$_POST()" function in php
## 3. we can also use "$_REQUEST()" function in php to receive the passing values


vi form_name.html
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv = "content-type" content = "text/html; charset = utf-8"/>
##        </head>
##        <body>
##                <form action="name.php" method="post">
##                        <div><label for = "firstName">First name:
##                                <input type = "text" name = "firstnamE" id = "firstnaMe"></label>
##                        </div>
##                        <div><label for = "lastName">Last name:
##                                <input type = "text" name = "lastnamE" id = "lastnaMe"></label>
##                        </div>
##                        <div><input type="submit" value = "GO"></div>
##                </form>
##        </body>
##</html>



vi name.php
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv="content-type" content="text/html; charset="utf-8"">
##        </head>
##        <body>
##                <p>
##                        <?php
##                        $firstName = $_POST['firstnamE'];
##                        $lastName = $_POST['lastnamE'];
##                        echo 'Welcome to our web site, ' .
##                        htmlspecialchars($firstName, ENT_QUOTES, 'UTF-8') . ' ' .
##                        htmlspecialchars($lastName, ENT_QUOTES, 'UTF-8') . '!';
##                        ?>
##                </p>
##        </body>
##</html>




vi name.php
##<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
##<html xmlns = "http://www.w3.org/1999/xhtml" xml:lang = "en" lang = "en">
##        <head>
##                <title>Query String Link Example</title>
##                <meta http-equiv="content-type" content="text/html; charset="utf-8"">
##        </head>
##        <body>
##                <p>
##                        <?php
##                        $firstName = $_REQUEST'firstnamE'];
##                        $lastName = $_REQUEST['lastnamE'];
##                        echo 'Welcome to our web site, ' .
##                        htmlspecialchars($firstName, ENT_QUOTES, 'UTF-8') . ' ' .
##                        htmlspecialchars($lastName, ENT_QUOTES, 'UTF-8') . '!';
##                        ?>
##                </p>
##        </body>
##</html>
















































